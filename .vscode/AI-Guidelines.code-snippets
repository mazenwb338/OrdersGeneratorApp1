{
	// Place your OrdersGeneratorApp workspace snippets here.
	// Each snippet is defined under a snippet name and has a scope, prefix, body and description.

	"AI Safe Instruction": {
		"scope": "plaintext,markdown",
		"prefix": "ai-safe",
		"body": [
			"I am building this app step by step.",
			"Do not rewrite or remove existing functionality unless I say so.",
			"Only add the requested feature.",
			"If you must touch existing code, explain first.",
			"Show the changes in patch/diff style or inside the specific file/function I mention.",
			"Keep everything else the same."
		],
		"description": "Safe AI coding instructions to enforce incremental build-up approach"
	},

	"AI Reminder (Short)": {
		"scope": "plaintext,markdown",
		"prefix": "ai-remind",
		"body": [
			"Only add, donâ€™t rewrite. Keep existing code intact unless I say so. Patch style preferred."
		],
		"description": "Short reminder for AI prompts"
	}
,
    "Git Milestone Backup Script": {
        "scope": "shellscript,plaintext,markdown",
        "prefix": "git-milestone-backup",
        "body": [
            "#!/usr/bin/env bash",
            "set -euo pipefail",
            "",
            "if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then",
            "  echo \"Not inside a git repository.\" >&2",
            "  exit 1",
            "fi",
            "",
            "echo \"=== Git Milestone Backup ===\"",
            "git status --short",
            "echo",
            "read -r -p \"Stage ALL changes (including new/deleted)? [y/N]: \" STAGE_ALL",
            "if [[ \"${STAGE_ALL,,}\" == \"y\" ]]; then",
            "  git add -A",
            "  echo \"All changes staged.\"",
            "else",
            "  echo \"Skipping auto stage. (Make sure desired changes are staged.)\"",
            "fi",
            "if git diff --cached --quiet; then",
            "  read -r -p \"No staged changes. Tag current HEAD anyway? [y/N]: \" CONT",
            "  [[ \"${CONT,,}\" == \"y\" ]] || { echo \"Aborting.\"; exit 0; }",
            "fi",
            "while true; do",
            "  read -r -p \"Version tag (e.g. v2025-08-29-m1): \" VERSION_TAG",
            "  [[ -z \"${VERSION_TAG}\" ]] && { echo \"Tag empty.\"; continue; }",
            "  if git rev-parse -q --verify \"refs/tags/${VERSION_TAG}\" >/dev/null; then",
            "    echo \"Tag exists.\"",
            "  elif [[ \"${VERSION_TAG}\" =~ [[:space:]] ]]; then",
            "    echo \"No whitespace allowed.\"",
            "  else",
            "    break",
            "  fi",
            "done",
            "read -r -p \"Commit title: \" COMMIT_TITLE",
            "[[ -z \"${COMMIT_TITLE}\" ]] && COMMIT_TITLE=\"chore: milestone ${VERSION_TAG}\"",
            "echo \"Enter description (end with single '.' line):\"",
            "DESC=()",
            "while IFS= read -r L; do",
            "  [[ \"$L\" == \".\" ]] && break",
            "  DESC+=(\"$L\")",
            "done",
            "DESC_TXT=$(printf '%s\\n' \"${DESC[@]}\")",
            "NEW_COMMIT=0",
            "if ! git diff --cached --quiet; then",
            "  git commit -m \"${COMMIT_TITLE}\" -m \"${DESC_TXT}\"",
            "  NEW_COMMIT=1",
            "fi",
            "TAG_MSG=\"${COMMIT_TITLE}\\n\\n${DESC_TXT}\"",
            "git tag -a \"${VERSION_TAG}\" -m \"${TAG_MSG}\"",
            "echo \"Tag ${VERSION_TAG} created.\"",
            "read -r -p \"Create bundle? [y/N]: \" MAKE_BUNDLE",
            "if [[ \"${MAKE_BUNDLE,,}\" == \"y\" ]]; then",
            "  TS=$(date +%Y%m%d-%H%M%S)",
            "  BUNDLE=\"milestone-${VERSION_TAG}-${TS}.bundle\"",
            "  git bundle create \"${BUNDLE}\" --all",
            "  echo \"Bundle: ${BUNDLE}\"",
            "fi",
            "if git remote | grep -q .; then",
            "  read -r -p \"Push commit & tag? [y/N]: \" PUSH_IT",
            "  if [[ \"${PUSH_IT,,}\" == \"y\" ]]; then",
            "    git push origin HEAD",
            "    git push origin \"${VERSION_TAG}\"",
            "    echo \"Pushed.\"",
            "  else",
            "    echo \"Skipped push.\"",
            "  fi",
            "else",
            "  echo \"No remote configured; skipping push.\"",
            "fi",
            "echo \"Summary:\"",
            "[[ $NEW_COMMIT -eq 1 ]] && echo \"Commit: $(git rev-parse --short HEAD)\"",
            "echo \"Tag:    ${VERSION_TAG}\"",
            "[[ -n ${BUNDLE:-} ]] && echo \"Bundle: ${BUNDLE}\"",
            "echo \"Done.\""
        ],
        "description": "Interactive milestone backup (commit + tag + optional bundle/push)"
    }
}
